{
    "name": "VM",
    "description": "VM test.",
    "author": "Frank Buss",
    "date": "2025",
    "blank": "#",
    "initial": "dtest",
    "tape": "00000000-00000000-01111000-p00000000- 00001100- 00000011- 00000000- 00000000- 00001101- 00000000- 01101010- 00001110- 00001111- 01110010",
    "transitions": [
        // move to next instruction
        ["dtest", "*", "*", "R", "*"],
        ["dtest", "p", "*", "R", "dtest2"],
        ["dtest2", "*", "*", "R", "*"],
        ["dtest2", "#", "*", "L", "decode"],
        ["dtest2", "-", "*", "L", "decode"],

        // start at right end of word
        // decode 4 bit instruction
        ["decode", "0", "*", "L", "d0"],
        ["decode", "1", "*", "L", "d1"],
        ["d0", "0", "*", "L", "d00"],
        ["d1", "1", "*", "L", "d11"],
        ["d0", "1", "*", "L", "d10"],
        ["d1", "0", "*", "L", "d01"],
        ["d00", "0", "*", "L", "d000"],
        ["d01", "0", "*", "L", "d001"],
        ["d10", "0", "*", "L", "d010"],
        ["d11", "0", "*", "L", "d011"],
        ["d00", "1", "*", "L", "d100"],
        ["d01", "1", "*", "L", "d101"],
        ["d10", "1", "*", "L", "d110"],
        ["d11", "1", "*", "L", "d111"],
        ["d000", "0", "*", "L", "loada"],
        ["d001", "0", "*", "L", "a2x"],
        ["d010", "0", "*", "L", "x2a"],
        ["d011", "0", "*", "L", "a2p"],
        ["d100", "0", "*", "L", "read"],
        ["d101", "0", "*", "L", "write"],
        ["d110", "0", "*", "L", "add"],
        ["d111", "0", "*", "L", "lshift"],
        ["d000", "1", "*", "L", "rshift"],
        ["d001", "1", "*", "L", "and"],
        ["d010", "1", "*", "L", "or"],
        ["d011", "1", "*", "L", "not"],
        ["d100", "1", "*", "L", "jump"],
        ["d101", "1", "*", "L", "jumpz"],
        ["d110", "1", "*", "L", "output"],
        ["d111", "1", "*", "L", "halt"],

        // write next thing to do at empty cell left to tape start
        ["loada", "*", "*", "L", "*"],
        ["loada", "#", "a", "R", "move-p+"],
        
        ["output", "*", "*", "L", "*"],
        ["output", "#", "d", "R", "move-p"],

        // move p to next word
        ["move-p", "*", "*", "R", "*"],
        ["move-p", "p", " ", "R", "move-p2"],
        ["move-p2", "*", "*", "R", "*"],
        ["move-p2", " ", "p", "L", "next"],

        // move p to next word and mark it with +
        ["move-p+", "*", "*", "R", "*"],
        ["move-p+", "p", " ", "R", "move-p+2"],
        ["move-p+2", "*", "*", "R", "*"],
        ["move-p+2", " ", "p", "L", "move-p+3"],
        ["move-p+3", "-", "+", "L", "next"],

        // move back to next task to do
        ["next", "*", "*", "L", "*"],

        // decode o-0,i-1 L direction
        ["decodeL", "*", "*", "L", "decodeL"],
        ["decodeL", "o", "0", "L", "decodeL"],
        ["decodeL", "i", "1", "L", "decodeL"],
        ["decodeL", "#", "*", "L", "move-p"], // after decoding all in L direction, move to next instrcution

        // loada microcode
        ["next", "a", "b", "R", "copy"],  // copy word marked with + to "a" reg
        ["next", "b", "c", "R", "move-p"],  // move p to next word
        ["next", "c", "#", "R", "dtest"],  // next instruction

        // output microcode
        ["next", "d", "#", "R", "dtest"],  // next instruction

        // if no next microcode is defined, then decode next instruction
        ["next", "#", "#", "R", "dtest"],

        // a2x microcode
        ["a2x", "*", "*", "L", "go2start"],
        ["go2start", "*", "*", "L", "go2start"],
        ["go2start", "#", "*", "R", "move2a"],

        ["move2a", "*", "*", "R", "move2a"],
        ["move2a", "-", "*", "R", "copy-a"],

        ["copy-a", "0", "o", "R", "move-a0"],
        ["copy-a", "1", "i", "R", "move-a1"],

        ["move-a0", "*", "*", "R", "move-a0"],
        ["move-a0", "-", "*", "R", "paste-a0"],

        ["move-a1", "*", "*", "R", "move-a1"],
        ["move-a1", "-", "*", "R", "paste-a1"],

        ["paste-a0", "o", "*", "R", "paste-a0"],
        ["paste-a0", "i", "*", "R", "paste-a0"],
        ["paste-a0", "*", "o", "R", "back2a"],

        ["paste-a1", "o", "*", "R", "paste-a1"],
        ["paste-a1", "i", "*", "R", "paste-a1"],
        ["paste-a1", "*", "i", "R", "back2a"],

        ["back2a", "*", "*", "L", "back2a"],
        ["back2a", "-", "*", "L", "back2mark"],

        ["back2mark", "*", "*", "L", "back2mark"],

        ["back2mark", "i", "*", "R", "copy-a"],
        ["back2mark", "o", "*", "R", "copy-a"],

        ["copy-a", "-", "*", "L", "decodeL"],

        // output microcode
        ["next", "d", "#", "R", "dtest"],  // next instruction

        // copy position specified at first word, to second word

        // first mark the RAM start with +, and move back to end of address
        ["start", "*", "*", "R", "*"],
        ["start", "-", "*", "R", "start2"],
        ["start2", "*", "*", "R", "*"],
        ["start2", "-", "*", "R", "start3"],
        ["start3", "*", "*", "R", "*"],
        ["start3", "-", "+", "L", "start4"],
        ["start4", "*", "*", "L", "*"],
        ["start4", "-", "*", "L", "start5"],
        ["start5", "*", "*", "L", "*"],
        ["start5", "-", "*", "L", "test"],

        // then check if counter is zero
        ["test", "0", "*", "L", "*"],
        ["test", "1", "*", "L", "test2"],
        ["test", "#", "*", "R", "copy"],
        ["test2", "*", "*", "R", "*"],
        ["test2", "-", "*", "L", "dec"],

        // if not decrement counter
        ["dec", "0", "1", "L", "carry"],
        ["dec", "1", "0", "L", "dec2"],
        ["dec", "#", "*", "R", "dec2"],
        ["carry", "0", "1", "L", "carry"],
        ["carry", "1", "0", "L", "dec2"],
        ["carry", "#", "#", "L", "dec2"],
        ["dec2", "*", "*", "R", "*"],
        ["dec2", "-", "*", "L", "move"],

        // and then move + marker
        ["move", "*", "*", "R", "*"],
        ["move", "+", "-", "R", "move2"],
        ["move2", "*", "*", "R", "*"],
        ["move2", "-", "+", "L", "move3"],
        ["move3", "*", "*", "L", "*"],
        ["move3", "#", "*", "R", "move4"],
        ["move4", "*", "*", "R", "*"],
        ["move4", "-", "*", "L", "test"],

        // copy word after + marker to second word, head is at tape start
        // first mark start of second word also with +
        ["copy", "*", "*", "R", "*"],
        ["copy", "-", "+", "R", "copy2"],
        // move to marked word in RAM
        ["copy2", "*", "*", "R", "*"],
        ["copy2", "+", "*", "R", "copy2b"],
        ["copy2b", "p ", "*", "R", "copy3"],
        // set bit marker
        ["copy3", "0", "o", "L", "copy4-0"],
        ["copy3", "1", "i", "L", "copy4-1"],
        ["copy3", "o", "*", "R", "*"],
        ["copy3", "i", "*", "R", "*"],
        ["copy3", "*", "*", "L", "copy7"],
        // move back to first +
        ["copy4-0", "*", "*", "L", "*"],
        ["copy4-1", "*", "*", "L", "*"],
        ["copy4-0", "+", "*", "L", "copy5-0"],
        ["copy4-1", "+", "*", "L", "copy5-1"],
        ["copy5-0", "*", "*", "L", "*"],
        ["copy5-1", "*", "*", "L", "*"],
        ["copy5-0", "+", "*", "R", "copy6-0"],
        ["copy5-1", "+", "*", "R", "copy6-1"],
        // move right to first bit which was not copied so far and set new bit marker
        ["copy6-0", "*", "*", "R", "*"],
        ["copy6-1", "*", "*", "R", "*"],
        ["copy6-0", "0", "o", "R", "copy2"],
        ["copy6-1", "0", "i", "R", "copy2"],
        ["copy6-0", "1", "o", "R", "copy2"],
        ["copy6-1", "1", "i", "R", "copy2"],

        // restore bits from markers
        ["copy7", "*", "*", "L", "*"],
        ["copy7", "o", "0", "L", "*"],
        ["copy7", "i", "1", "L", "*"],
        ["copy7", "+", "-", "L", "*"],
        ["copy7", "#", "*", "R", "next"],

        // go to start for next instructions
        ["go2s4next", "*", "*", "L", "go2s4next"],
        ["go2s4next", "#", "*", "R", "move-p"],

        // a2p
        ["a2p", "*", "*", "L", "a2p-go2start"],
        ["a2p-go2start", "*", "*", "L", "a2p-go2start"],
        ["a2p-go2start", "#", "*", "R", "a2p-move2a"],

        ["a2p-move2a", "*", "*", "R", "a2p-move2a"],
        ["a2p-move2a", "-", "*", "R", "a2p-copy-a"],

        ["a2p-copy-a", "0", "o", "L", "a2p-move-a0"],
        ["a2p-copy-a", "1", "i", "L", "a2p-move-a1"],

        ["a2p-move-a0", "*", "*", "L", "a2p-move-a0"],
        ["a2p-move-a0", "#", "*", "R", "a2p-paste-a0"],

        ["a2p-move-a1", "*", "*", "L", "a2p-move-a1"],
        ["a2p-move-a1", "#", "*", "R", "a2p-paste-a1"],

        ["a2p-paste-a0", "o", "*", "R", "a2p-paste-a0"],
        ["a2p-paste-a0", "i", "*", "R", "a2p-paste-a0"],
        ["a2p-paste-a0", "*", "o", "R", "a2p-back2a"],

        ["a2p-paste-a1", "o", "*", "R", "a2p-paste-a1"],
        ["a2p-paste-a1", "i", "*", "R", "a2p-paste-a1"],
        ["a2p-paste-a1", "*", "i", "R", "a2p-back2a"],

        ["a2p-back2a", "*", "*", "R", "a2p-back2a"],
        ["a2p-back2a", "-", "*", "R", "a2p-back2mark"],

        ["a2p-back2mark", "*", "*", "R", "a2p-back2mark"],

        ["a2p-back2mark", "1", "*", "", "a2p-copy-a"],
        ["a2p-back2mark", "0", "*", "", "a2p-copy-a"],

        ["a2p-back2mark", "-", "*", "L", "decodeL"],

        // not
        ["not", "*", "*", "L", "not-go2start"],
        ["not-go2start", "*", "*", "L", "not-go2start"],
        ["not-go2start", "#", "*", "R", "not-move2a"],

        ["not-move2a", "*", "*", "R", "not-move2a"],
        ["not-move2a", "-", "*", "R", "not-flip"],

        ["not-flip", "0", "1", "R", "not-flip"],
        ["not-flip", "1", "0", "R", "not-flip"],

        ["not-flip", "-", "*", "R", "move-p"], // next instruction

        //x2a
        ["x2a", "*", "*", "L", "x2a-go2start"],
        ["x2a-go2start", "*", "*", "L", "x2a-go2start"],
        ["x2a-go2start", "#", "*", "R", "x2a-move2a"],

        ["x2a-move2a", "*", "*", "R", "x2a-move2a"],
        ["x2a-move2a", "-", "*", "R", "x2a-move2x"],

        ["x2a-move2x", "*", "*", "R", "x2a-move2x"],
        ["x2a-move2x", "-", "*", "R", "x2a-copy-x"],

        ["x2a-copy-x", "0", "o", "L", "x2a-move-x0"],
        ["x2a-copy-x", "1", "i", "L", "x2a-move-x1"],

        ["x2a-move-x0", "*", "*", "L", "x2a-move-x0"],
        ["x2a-move-x0", "-", "*", "L", "x2a-move-x02a"],

        ["x2a-move-x1", "*", "*", "L", "x2a-move-x1"],
        ["x2a-move-x1", "-", "*", "L", "x2a-move-x12a"],

        ["x2a-move-x02a", "*", "*", "L", "x2a-move-x02a"],
        ["x2a-move-x02a", "-", "*", "R", "x2a-paste-x0"],

        ["x2a-move-x12a", "*", "*", "L", "x2a-move-x12a"],
        ["x2a-move-x12a", "-", "*", "R", "x2a-paste-x1"],

        ["x2a-paste-x0", "o", "*", "R", "x2a-paste-x0"],
        ["x2a-paste-x0", "i", "*", "R", "x2a-paste-x0"],
        ["x2a-paste-x0", "*", "o", "R", "x2a-back2x"],

        ["x2a-paste-x1", "o", "*", "R", "x2a-paste-x1"],
        ["x2a-paste-x1", "i", "*", "R", "x2a-paste-x1"],
        ["x2a-paste-x1", "*", "i", "R", "x2a-back2x"],

        ["x2a-back2x", "*", "*", "R", "x2a-back2x"],
        ["x2a-back2x", "-", "*", "R", "x2a-back2mark"],

        ["x2a-back2mark", "*", "*", "R", "x2a-back2mark"],

        ["x2a-back2mark", "1", "*", "", "x2a-copy-x"],
        ["x2a-back2mark", "0", "*", "", "x2a-copy-x"],

        ["x2a-back2mark", "-", "*", "L", "decodeL"],

        // lshift
        ["lshift", "*", "*", "L", "lshift-go2start"],
        ["lshift-go2start", "*", "*", "L", "lshift-go2start"],
        ["lshift-go2start", "#", "*", "R", "lshift-move2a"],

        ["lshift-move2a", "*", "*", "R", "lshift-move2a"],
        ["lshift-move2a", "-", "*", "R", "lshift-1step"],

        ["lshift-1step", "*", "*", "R", "lshift-shift"],
        ["lshift-1step", "-", "*", "R", "lshift-shift0nhalt"],

        ["lshift-shift", "0", "*", "L", "lshift-shift0"],
        ["lshift-shift", "1", "*", "L", "lshift-shift1"],

        ["lshift-shift0", "*", "0", "R", "lshift-1step"],
        ["lshift-shift1", "*", "1", "R", "lshift-1step"],

        ["lshift-shift0nhalt", "*", "0", "R", "move-p"], // next instruction
        ["lshift-shift", "-", "*", "L", "lshift-shift0nhalt"],

        // rshift
        ["rshift", "*", "*", "L", "rshift-go2start"],
        ["rshift-go2start", "*", "*", "L", "rshift-go2start"],
        ["rshift-go2start", "#", "*", "R", "rshift-move2a"],

        ["rshift-move2a", "*", "*", "R", "rshift-move2a"],
        ["rshift-move2a", "-", "*", "R", "rshift-move2a-end"],

        ["rshift-move2a-end", "*", "*", "R", "rshift-move2a-end"],
        ["rshift-move2a-end", "-", "*", "L", "rshift-1step"],

        ["rshift-1step", "*", "*", "L", "rshift-shift"],
        ["rshift-1step", "-", "*", "R", "rshift-shift0nhalt"],

        ["rshift-shift", "0", "*", "R", "rshift-shift0"],
        ["rshift-shift", "1", "*", "R", "rshift-shift1"],

        ["rshift-shift0", "*", "0", "L", "rshift-1step"],
        ["rshift-shift1", "*", "1", "L", "rshift-1step"],

        ["rshift-shift0nhalt", "*", "0", "R", "move-p"], // next instruction
        ["rshift-shift", "-", "*", "R", "rshift-shift0nhalt"],

        // write
        ["write", "*", "*", "L", "write-go2start"],
        ["write-go2start", "*", "*", "L", "write-go2start"],
        ["write-go2start", "#", "*", "R", "write-start"],

        // first mark the RAM start with +, and move back to end of address
        ["write-start", "*", "*", "R", "*"],
        ["write-start", "-", "*", "R", "write-start2"],
        ["write-start2", "*", "*", "R", "*"],
        ["write-start2", "-", "*", "R", "write-start3"],
        ["write-start3", "*", "*", "R", "*"],
        ["write-start3", "-", "+", "L", "write-start4"],
        ["write-start4", "*", "*", "L", "*"],
        ["write-start4", "-", "*", "L", "write-start5"],
        ["write-start5", "*", "*", "L", "*"],
        ["write-start5", "-", "*", "L", "write-test"],

        // then check if counter is zero
        ["write-test", "0", "*", "L", "*"],
        ["write-test", "1", "*", "L", "write-test2"],
        ["write-test", "#", "*", "R", "write-copy"],
        ["write-test2", "*", "*", "R", "*"],
        ["write-test2", "-", "*", "L", "write-dec"],

        // if not decrement counter
        ["write-dec", "0", "1", "L", "write-carry"],
        ["write-dec", "1", "0", "L", "write-dec2"],
        ["write-dec", "#", "*", "R", "write-dec2"],
        ["write-carry", "0", "1", "L", "write-carry"],
        ["write-carry", "1", "0", "L", "write-dec2"],
        ["write-carry", "#", "#", "L", "write-dec2"],
        ["write-dec2", "*", "*", "R", "*"],
        ["write-dec2", "-", "*", "L", "write-move"],

        // and then move + marker
        ["write-move", "*", "*", "R", "*"],
        ["write-move", "+", "-", "R", "write-move2"],
        ["write-move2", "*", "*", "R", "*"],
        ["write-move2", "-", "+", "L", "write-move3"],
        ["write-move3", "*", "*", "L", "*"],
        ["write-move3", "#", "*", "R", "write-move4"],
        ["write-move4", "*", "*", "R", "*"],
        ["write-move4", "-", "*", "L", "write-test"],

        //start copy and paste
        ["write-copy", "*", "*", "L", "wc-go2start"],
        ["wc-go2start", "*", "*", "L", "wc-go2start"],
        ["wc-go2start", "#", "*", "R", "wc-move2a"],

        ["wc-move2a", "*", "*", "R", "wc-move2a"],
        ["wc-move2a", "-", "*", "R", "wc-copy-a"],

        ["wc-copy-a", "*", "*", "R", "wc-copy-a"],
        ["wc-copy-a", "0", "o", "R", "wc-move-a0"],
        ["wc-copy-a", "1", "i", "R", "wc-move-a1"],

        ["wc-move-a0", "*", "*", "R", "wc-move-a0"],
        ["wc-move-a0", "+", "*", "R", "wc-paste-a0"],

        ["wc-move-a1", "*", "*", "R", "wc-move-a1"],
        ["wc-move-a1", "+", "*", "R", "wc-paste-a1"],

        ["wc-paste-a0", "o", "*", "R", "wc-paste-a0"],
        ["wc-paste-a0", "i", "*", "R", "wc-paste-a0"],
        ["wc-paste-a0", " ", "*", "R", "wc-paste-a0"],
        ["wc-paste-a0", "*", "o", "L", "wc-go2start"],

        ["wc-paste-a1", "o", "*", "R", "wc-paste-a1"],
        ["wc-paste-a1", "i", "*", "R", "wc-paste-a1"],
        ["wc-paste-a1", " ", "*", "R", "wc-paste-a1"],
        ["wc-paste-a1", "*", "i", "L", "wc-go2start"],

        ["wc-copy-a", "-", "*", "L", "wc-decode-a"],

        ["wc-decode-a", "*", "*", "L", "wc-decode-a"],
        ["wc-decode-a", "o", "0", "L", "wc-decode-a"],
        ["wc-decode-a", "i", "1", "L", "wc-decode-a"],
        ["wc-decode-a", "-", "*", "R", "wc-move2+"],

        ["wc-move2+", "*", "*", "R", "wc-move2+"],
        ["wc-move2+", "+", "-", "R", "wc-decode-word"],

        ["wc-decode-word", "*", "*", "R", "wc-decode-word"],
        ["wc-decode-word", "o", "0", "R", "wc-decode-word"],
        ["wc-decode-word", "i", "1", "R", "wc-decode-word"],
        ["wc-decode-word", "-", "*", "L", "go2s4next"],

        // read
        ["read", "*", "*", "L", "read-go2start"],
        ["read-go2start", "*", "*", "L", "read-go2start"],
        ["read-go2start", "#", "*", "R", "read-start"],

        // first mark the RAM start with +, and move back to end of address
        ["read-start", "*", "*", "R", "*"],
        ["read-start", "-", "*", "R", "read-start2"],
        ["read-start2", "*", "*", "R", "*"],
        ["read-start2", "-", "*", "R", "read-start3"],
        ["read-start3", "*", "*", "R", "*"],
        ["read-start3", "-", "+", "L", "read-start4"],
        ["read-start4", "*", "*", "L", "*"],
        ["read-start4", "-", "*", "L", "read-start5"],
        ["read-start5", "*", "*", "L", "*"],
        ["read-start5", "-", "*", "L", "read-test"],

        // then check if counter is zero
        ["read-test", "0", "*", "L", "*"],
        ["read-test", "1", "*", "L", "read-test2"],
        ["read-test", "#", "*", "R", "read-copy"],
        ["read-test2", "*", "*", "R", "*"],
        ["read-test2", "-", "*", "L", "read-dec"],

        // if not decrement counter
        ["read-dec", "0", "1", "L", "read-carry"],
        ["read-dec", "1", "0", "L", "read-dec2"],
        ["read-dec", "#", "*", "R", "read-dec2"],
        ["read-carry", "0", "1", "L", "read-carry"],
        ["read-carry", "1", "0", "L", "read-dec2"],
        ["read-carry", "#", "#", "L", "read-dec2"],
        ["read-dec2", "*", "*", "R", "*"],
        ["read-dec2", "-", "*", "L", "read-move"],

        // and then move + marker
        ["read-move", "*", "*", "R", "*"],
        ["read-move", "+", "-", "R", "read-move2"],
        ["read-move2", "*", "*", "R", "*"],
        ["read-move2", "-", "+", "L", "read-move3"],
        ["read-move3", "*", "*", "L", "*"],
        ["read-move3", "#", "*", "R", "read-move4"],
        ["read-move4", "*", "*", "R", "*"],
        ["read-move4", "-", "*", "L", "read-test"],

        //start copy and paste
        ["read-copy", "*", "*", "R", "rc-go2+"],
        ["rc-go2+", "*", "*", "R", "rc-go2+"],
        ["rc-go2+", "+", "*", "R", "rc-copy-word"],

        ["rc-copy-word", "*", "*", "R", "rc-copy-word"],
        ["rc-copy-word", "0", "o", "R", "rc-move-a0"],
        ["rc-copy-word", "1", "i", "R", "rc-move-a1"],

        ["rc-move-a0", "*", "*", "L", "rc-move-a0"],
        ["rc-move-a0", "#", "*", "R", "rc-move-a02a"],
        ["rc-move-a02a", "*", "*", "R", "rc-move-a02a"],
        ["rc-move-a02a", "-", "*", "R", "rc-paste-a0"],

        ["rc-move-a1", "*", "*", "L", "rc-move-a1"],
        ["rc-move-a1", "#", "*", "R", "rc-move-a12a"],
        ["rc-move-a12a", "*", "*", "R", "rc-move-a12a"],
        ["rc-move-a12a", "-", "*", "R", "rc-paste-a1"],

        ["rc-paste-a0", "o", "*", "R", "rc-paste-a0"],
        ["rc-paste-a0", "i", "*", "R", "rc-paste-a0"],
        ["rc-paste-a0", "*", "o", "R", "rc-go2+"],

        ["rc-paste-a1", "o", "*", "R", "rc-paste-a1"],
        ["rc-paste-a1", "i", "*", "R", "rc-paste-a1"],
        ["rc-paste-a1", "*", "i", "R", "rc-go2+"],

        ["rc-copy-word", "-", "*", "L", "rc-decode-word"],

        ["rc-decode-word", "*", "*", "L", "rc-decode-word"],
        ["rc-decode-word", "o", "0", "L", "rc-decode-word"],
        ["rc-decode-word", "i", "1", "L", "rc-decode-word"],
        ["rc-decode-word", "+", "-", "L", "rc-move2a"],

        ["rc-move2a", "*", "*", "L", "rc-move2a"],
        ["rc-move2a", "#", "*", "R", "rc-move2a-"],

        ["rc-move2a-", "*", "*", "R", "rc-move2a-"],
        ["rc-move2a-", "-", "*", "R", "rc-decode-a"],

        ["rc-decode-a", "*", "*", "R", "rc-decode-a"],
        ["rc-decode-a", "o", "0", "R", "rc-decode-a"],
        ["rc-decode-a", "i", "1", "R", "rc-decode-a"],
        ["rc-decode-a", "-", "*", "L", "go2s4next"],

        // jump
        ["jump", "*", "*", "L", "jump-go2start"],
        ["jump-go2start", "*", "*", "L", "jump-go2start"],
        ["jump-go2start", "#", "*", "R", "jump-start"],

        // first mark the RAM start with +, and move back to end of address
        ["jump-start", "*", "*", "R", "*"],
        ["jump-start", "-", "*", "R", "jump-start2"],
        ["jump-start2", "*", "*", "R", "*"],
        ["jump-start2", "-", "*", "R", "jump-start3"],
        ["jump-start3", "*", "*", "R", "*"],
        ["jump-start3", " ", "+", "L", "jump-start4"],
        ["jump-start4", "*", "*", "L", "*"],
        ["jump-start4", "-", "*", "L", "jump-start5"],
        ["jump-start5", "*", "*", "L", "*"],
        ["jump-start5", "-", "*", "L", "jump-start6"],
        ["jump-start6", "*", "*", "L", "*"],
        ["jump-start6", "-", "*", "L", "jump-test"],

        // then check if counter is zero
        ["jump-test", "0", "*", "L", "*"],
        ["jump-test", "1", "*", "L", "jump-test2"],
        ["jump-test", "#", "*", "R", "jump-perform"],
        ["jump-test2", "*", "*", "R", "*"],
        ["jump-test2", "-", "*", "L", "jump-dec"],

        // if not decrement counter
        ["jump-dec", "0", "1", "L", "jump-carry"],
        ["jump-dec", "1", "0", "L", "jump-dec2"],
        ["jump-dec", "#", "*", "R", "jump-dec2"],
        ["jump-carry", "0", "1", "L", "jump-carry"],
        ["jump-carry", "1", "0", "L", "jump-dec2"],
        ["jump-carry", "#", "#", "L", "jump-dec2"],
        ["jump-dec2", "*", "*", "R", "*"],
        ["jump-dec2", "-", "*", "L", "jump-move"],

        // and then move + marker
        ["jump-move", "*", "*", "R", "*"],
        ["jump-move", "+", " ", "R", "jump-move2"],
        ["jump-move2", "*", "*", "R", "*"],
        ["jump-move2", " ", "+", "L", "jump-move3"],
        ["jump-move2", "p", "+", "L", "jump-move3"],
        ["jump-move3", "*", "*", "L", "*"],
        ["jump-move3", "#", "*", "R", "jump-move4"],
        ["jump-move4", "*", "*", "R", "*"],
        ["jump-move4", "-", "*", "L", "jump-test"],

        //start copy and paste
        ["jump-perform", "*", "*", "R", "jump-perform"],
        ["jump-perform", "+", "p", "R", "jump-perform"],
        ["jump-perform", "p", " ", "R", "jump-perform"],
        ["jump-perform", "#", "*", "L", "jump-go2p"],

        ["jump-go2p", "*", "*", "L", "jump-go2p"],
        ["jump-go2p", "p", "*", "L", "dtest"],

        // jumpz
        ["jumpz", "*", "*", "L", "jumpz-go2start"],
        ["jumpz-go2start", "*", "*", "L", "jumpz-go2start"],
        ["jumpz-go2start", "#", "*", "R", "jumpz-go2p"],

        ["jumpz-go2p", "*", "*", "R", "jumpz-go2p"],
        ["jumpz-go2p", "-", "*", "R", "jumpz-go2a"],

        ["jumpz-go2a", "0", "*", "R", "jumpz-go2a"],
        ["jumpz-go2a", "1", "*", "R", "move-p"],
        ["jumpz-go2a", "-", "*", "L", "jump"],

        // add
        ["add", "*", "*", "L", "add-go2start"],
        ["add-go2start", "*", "*", "L", "add-go2start"],
        ["add-go2start", "#", "*", "R", "add-move2a"],
        
        ["add-move2a", "*", "*", "R", "*"],
        ["add-move2a", "-", "*", "R", "add-move2x"],

        ["add-move2x", "*", "*", "R", "*"],
        ["add-move2x", "-", "*", "R", "add-move2x-end"],
        ["add-move2x-end", "*", "*", "R", "*"],
        ["add-move2x-end", "-", "*", "L", "add-copy-word"],

        ["add-copy-word", "*", "*", "L", "add-copy-word"],
        ["add-copy-word", "0", "o", "L", "add-move-a0"],
        ["add-copy-word", "1", "i", "L", "add-move-a1"],

        ["add-move-a0", "*", "*", "L", "add-move-a0"],
        ["add-move-a0", "-", "*", "L", "add-paste-a0"],

        ["add-move-a1", "*", "*", "L", "add-move-a1"],
        ["add-move-a1", "-", "*", "L", "add-paste-a1"],

        ["add-paste-a0", "o", "*", "L", "add-paste-a0"],
        ["add-paste-a0", "i", "*", "L", "add-paste-a0"],
        ["add-paste-a0", "0", "o", "R", "add-move2x"],
        ["add-paste-a0", "1", "i", "R", "add-move2x"],

        ["add-paste-a1", "o", "*", "L", "add-paste-a1"],
        ["add-paste-a1", "i", "*", "L", "add-paste-a1"],
        ["add-paste-a1", "0", "i", "R", "add-move2x"],
        ["add-paste-a1", "1", "o", "R", "add-move2x+carry"],

        ["add-move2x+carry", "*", "*", "R", "add-move2x+carry"],
        ["add-move2x+carry", "-", "*", "R", "add-move2x-end+carry"],
        ["add-move2x-end+carry", "*", "*", "R", "add-move2x-end+carry"],
        ["add-move2x-end+carry", "-", "*", "L", "add-copy-word+carry"],

        ["add-copy-word+carry", "*", "*", "L", "add-copy-word+carry"],
        ["add-copy-word+carry", "0", "o", "L", "add-move-a0+carry"],
        ["add-copy-word+carry", "1", "i", "L", "add-move-a1+carry"],

        ["add-move-a0+carry", "*", "*", "L", "add-move-a0+carry"],
        ["add-move-a0+carry", "-", "*", "L", "add-paste-a0+carry"],

        ["add-move-a1+carry", "*", "*", "L", "add-move-a1+carry"],
        ["add-move-a1+carry", "-", "*", "L", "add-paste-a1+carry"],

        ["add-paste-a0+carry", "o", "*", "L", "add-paste-a0+carry"],
        ["add-paste-a0+carry", "i", "*", "L", "add-paste-a0+carry"],
        ["add-paste-a0+carry", "0", "i", "R", "add-move2x"],
        ["add-paste-a0+carry", "1", "o", "R", "add-move2x+carry"],

        ["add-paste-a1+carry", "o", "*", "L", "add-paste-a1+carry"],
        ["add-paste-a1+carry", "i", "*", "L", "add-paste-a1+carry"],
        ["add-paste-a1+carry", "0", "o", "R", "add-move2x+carry"],
        ["add-paste-a1+carry", "1", "i", "R", "add-move2x+carry"],

        ["add-copy-word", "-", "*", "R", "add-decode-xR"],
        ["add-copy-word+carry", "-", "*", "R", "add-decode-xR"],

        ["add-decode-xR", "*", "*", "R", "add-decode-xR"],
        ["add-decode-xR", "o", "0", "R", "add-decode-xR"],
        ["add-decode-xR", "i", "1", "R", "add-decode-xR"],
        ["add-decode-xR", "-", "*", "L", "decodeL"],

        // and
        ["and", "*", "*", "L", "and-go2start"],
        ["and-go2start", "*", "*", "L", "and-go2start"],
        ["and-go2start", "#", "*", "R", "and-go2a"],
        
        ["and-go2a", "*", "*", "R", "and-go2a"],
        ["and-go2a", "-", "*", "R", "and-go2x"],

        ["and-go2x", "*", "*", "R", "and-go2x"],
        ["and-go2x", "-", "*", "R", "and-go2x-end"],

        ["and-go2x-end", "*", "*", "R", "and-go2x-end"],
        ["and-go2x-end", "-", "*", "L", "and-copy-word"],

        ["and-copy-word", "*", "*", "L", "and-copy-word"],
        ["and-copy-word", "0", "o", "L", "and-move-a0"],
        ["and-copy-word", "1", "i", "L", "and-move-a1"],

        ["and-move-a0", "*", "*", "L", "and-move-a0"],
        ["and-move-a0", "-", "*", "L", "and-paste-a0"],

        ["and-move-a1", "*", "*", "L", "and-move-a1"],
        ["and-move-a1", "-", "*", "L", "and-paste-a1"],

        ["and-paste-a0", "o", "*", "L", "and-paste-a0"],
        ["and-paste-a0", "i", "*", "L", "and-paste-a0"],
        ["and-paste-a0", "0", "o", "R", "and-go2x"],
        ["and-paste-a0", "1", "o", "R", "and-go2x"],

        ["and-paste-a1", "o", "*", "L", "and-paste-a1"],
        ["and-paste-a1", "i", "*", "L", "and-paste-a1"],
        ["and-paste-a1", "0", "o", "R", "and-go2x"],
        ["and-paste-a1", "1", "i", "R", "and-go2x"],

        ["and-copy-word", "-", "*", "R", "add-decode-xR"],

        // or
        ["or", "*", "*", "L", "or-go2start"],
        ["or-go2start", "*", "*", "L", "or-go2start"],
        ["or-go2start", "#", "*", "R", "or-go2a"],

        ["or-go2a", "*", "*", "R", "or-go2a"],
        ["or-go2a", "-", "*", "R", "or-go2x"],

        ["or-go2x", "*", "*", "R", "or-go2x"],
        ["or-go2x", "-", "*", "R", "or-go2x-end"],

        ["or-go2x-end", "*", "*", "R", "or-go2x-end"],
        ["or-go2x-end", "-", "*", "L", "or-copy-word"],

        ["or-copy-word", "*", "*", "L", "or-copy-word"],
        ["or-copy-word", "0", "o", "L", "or-move-a0"],
        ["or-copy-word", "1", "i", "L", "or-move-a1"],

        ["or-move-a0", "*", "*", "L", "or-move-a0"],
        ["or-move-a0", "-", "*", "L", "or-paste-a0"],

        ["or-move-a1", "*", "*", "L", "or-move-a1"],
        ["or-move-a1", "-", "*", "L", "or-paste-a1"],

        ["or-paste-a0", "o", "*", "L", "or-paste-a0"],
        ["or-paste-a0", "i", "*", "L", "or-paste-a0"],
        ["or-paste-a0", "0", "o", "R", "or-go2x"],
        ["or-paste-a0", "1", "i", "R", "or-go2x"],

        ["or-paste-a1", "o", "*", "L", "or-paste-a1"],
        ["or-paste-a1", "i", "*", "L", "or-paste-a1"],
        ["or-paste-a1", "0", "i", "R", "or-go2x"],
        ["or-paste-a1", "1", "i", "R", "or-go2x"],

        ["or-copy-word", "-", "*", "R", "add-decode-xR"]
    ]
}